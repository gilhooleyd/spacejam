package game;

import objects.Asteroid;
import objects.Bullet;
import objects.Obj;

public class CollisionChecker 
{
	public static void checkAll(List<List<Obj>> objList, int delta)
	{
		// VERY BAD CODE. LISTS NEED TO BE IN CORRECT ORDER
		List<Obj> astList = objList.next.next.data;
		List<Obj> bulletList = objList.next.data;
		List<Obj> shipList = objList.next.next.next.data;
		List<Obj> aPointer = astList.next;

		while (aPointer != null)
		{
			// Asteroid to bullet collision
			List<Obj> bPointer = bulletList.next;
			while (bPointer != null)
			{
				if (aPointer.data.shape() != null && bPointer.data.shape() != null)
				{

					if (aPointer.data.shape().intersects(bPointer.data.shape()))
					{
						System.out.println("HIT!");
						aPointer.remove();
						bPointer.remove();
						break;
					}
				}
				bPointer = bPointer.next;
			}
			// Asteroid to ship collision
			List<Obj> sPointer = shipList.next;
			while(sPointer != null)
			{
				if (sPointer.data.shape() != null && aPointer.data.shape() != null)
				{

					if (sPointer.data.shape().intersects(aPointer.data.shape()))
					{
						backStep(aPointer.data, delta);
						backStep(sPointer.data, delta);
						
						float[] sSpeed = sPointer.data.setSpeed(null);
						float[] aSpeed = aPointer.data.setSpeed(null);
						if (sSpeed[0] < .1 && sSpeed[1] < .1)
						{
							sSpeed[0] = aSpeed[0] * -2 / 5;
							sSpeed[1] = aSpeed[1] * -2 / 5;
						}
						else
						{
							sSpeed[0] *= -1.0/5;
							sSpeed[1] *= -1.0/5;
						}
						
						if (aSpeed[0] < .1 && aSpeed[1] < .1)
						{
							aSpeed[0] = sSpeed[0] * -2 / 5;
							aSpeed[1] = sSpeed[1] * -2 / 5;
						}
						else
						{
							aSpeed[0] *= -1.0/5;
							aSpeed[1] *= -1.0/5;
						}
						
						break;
					}
				}
				sPointer = sPointer.next;
			}
			
			// asteroid to other asteroid collision
			List<Obj> aPointer1 = aPointer.next;
			while(aPointer1 != null)
			{
				if (aPointer.data.shape() != null && aPointer1.data.shape() != null)
				{

					if (aPointer.data.shape().intersects(aPointer1.data.shape()))
					{
						backStep(aPointer.data, delta);
						backStep(aPointer1.data, delta);
						
						float[] aSpeed = aPointer.data.setSpeed(null);
						float[] aSpeed1 = aPointer1.data.setSpeed(null);
						
						if (aSpeed[0] < .1 && aSpeed[1] < .1)
						{
							aSpeed[0] = aSpeed1[0] * -2 / 5;
							aSpeed[1] = aSpeed1[1] * -2 / 5;
						}
						else
						{
							aSpeed[0] *= -1.0/5;
							aSpeed[1] *= -1.0/5;
						}

						if (aSpeed1[0] < .1 && aSpeed1[1] < .1)
						{
							aSpeed1[0] = aSpeed[0] * -2 / 5;
							aSpeed1[1] = aSpeed[1] * -2 / 5;
						}
						else
						{
							aSpeed1[0] *= -1.0/5;
							aSpeed1[1] *= -1.0/5;
						}
						
						break;
					}
				}
			}
			aPointer = aPointer.next;
		}
		
	}
	private static void backStep(Obj thing, int delta)
	{
		float[] speed = thing.setSpeed(null);
		speed[0] *= -1;
		speed[1] *= -1;
		thing.update(delta);
		speed[0] *= -1;
		speed[1] *= -1;
	}
}

